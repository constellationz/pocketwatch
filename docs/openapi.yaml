openapi: 3.0.0
info:
  title: Pocketwatch
  description: API for pocketwatch.page
  license:
    name: MIT
    url: https://mit-license.org
  version: 1.0.0
servers:
- url: http://www.pocketwatch.page/api
paths:
  /tasks:
    get:
      tags:
      - tasks
      summary: Get all tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTasks'
        required: false
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - bearerAuth: []
    post:
      tags:
      - tasks
      summary: Create a task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTask'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - bearerAuth: []
  /tasks/{id}:
    put:
      tags:
      - tasks
      summary: Update a task
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - bearerAuth: []
    delete:
      tags:
      - tasks
      summary: Delete a task
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedTask'
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - bearerAuth: []
  /users:
    post:
      tags:
      - users
      summary: Register a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/login:
    post:
      tags:
      - users
      summary: Authenticate a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/me:
    get:
      tags:
      - users
      summary: Get the currently logged in user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearerAuth: []
  /users/updateEmail:
    post:
      tags:
      - users
      summary: Update the email for the currently logged in user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmail'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearerAuth: []
  /users/updatePassword:
    post:
      tags:
      - users
      summary: Update the password for the currently logged in user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - bearerAuth: []
  /users/requestPasswordReset:
    post:
      tags:
      - users
      summary: Request a password reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPasswordReset'
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/requestEmailVerification:
    post:
      tags:
      - users
      summary: Request email verification
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - bearerAuth: []
  /users/verifyEmail:
    post:
      tags:
      - users
      summary: Verify a user's email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/resetPassword:
    post:
      tags:
      - users
      summary: Reset the user's password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      responses:
        "200":
          description: OK
        "401":
          description: Not Authorized
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    NewTask:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The name of the task
        startTime:
          type: number
          description: The start time of the task in UNIX milliseconds
        endTime:
          type: number
          description: The end time of the task in UNIX milliseconds
        location:
          maxItems: 2
          minItems: 2
          type: array
          description: The location of the task
          items:
            type: number
    Task:
      required:
      - id
      - name
      - user
      type: object
      properties:
        user:
          type: string
          description: The id of the user who created this task
        _id:
          type: string
          description: The unique identifier for a task
        name:
          type: string
          description: The name of the task
        startTime:
          type: number
          description: The start of the task in UNIX milliseconds
        endTime:
          type: number
          description: The end of the task in UNIX milliseconds
        location:
          maxItems: 2
          minItems: 2
          type: array
          items:
            type: number
        createdAt:
          type: string
          description: The time this task was created
        updatedAt:
          type: string
          description: The time this task was last updated
    DeletedTask:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for a task
    GetTasks:
      type: object
      properties:
        search:
          type: string
          description: The search query
        skip:
          type: integer
          description: The number of results to skip
        limit:
          type: integer
          description: The number of results to limit the search to
    UserRegister:
      required:
      - email
      - name
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    UserLogin:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    UpdatePassword:
      required:
      - newPassword
      - password
      type: object
      properties:
        password:
          type: string
        newPassword:
          type: string
    UpdateEmail:
      required:
      - newEmail
      - password
      type: object
      properties:
        password:
          type: string
        newEmail:
          type: string
    RequestPasswordReset:
      required:
      - email
      type: object
      properties:
        email:
          type: string
    VerifyEmail:
      required:
      - token
      type: object
      properties:
        token:
          type: string
          description: The authorization token provided in the verification URL
    ResetPassword:
      required:
      - newPassword
      - token
      type: object
      properties:
        token:
          type: string
          description: The authorization token provided in the verification URL
        newPassword:
          type: string
          description: The new password
    User:
      required:
      - _id
      - email
      - name
      - token
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for a user
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email address of the user
        token:
          type: string
          description: The bearer token for the user
    Error:
      type: object
      properties:
        message:
          type: string
          description: A human-readable error message
        stack:
          type: string
          description: The error message that the server generated
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT